package edu.sc.seis.fissuresUtil.namingService;


import edu.sc.seis.anhinga.plottable.*;

import edu.iris.Fissures.IfSeismogramDC.*;
import edu.iris.Fissures.IfNetwork.*;
import edu.iris.Fissures.IfPlottable.*;
import edu.iris.Fissures.display.*;
import edu.iris.Fissures.model.*;
import edu.iris.Fissures.utility.*;
import edu.iris.Fissures.*;
import java.io.*;
import java.util.*;

import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import org.omg.CORBA.portable.*;

import org.apache.log4j.*;
/**
 * TestNamingService.java
 *
 *
 * Created: Wed Jan  9 10:41:46 2002
 *
 * @author <a href="mailto:">Srinivasa Telukutla</a>
 * @version
 */

public class TestNamingService {
    public TestNamingService (){
	
    }

    public static void main(String[] args) {

	try {
	      org.omg.CORBA_2_3.ORB orb;
  
	    java.util.Properties props = System.getProperties();
	    props.put("org.omg.CORBA.ORBClass", "com.ooc.CORBA.ORB");
	    props.put("org.omg.CORBA.ORBSingletonClass",
		      "com.ooc.CORBA.ORBSingleton");
	    // get some defaults
            String propFilename=
                "dataexplorer.prop";
            String defaultsFilename=
		"edu/sc/seis/vsnexplorer/task/"+propFilename;
           
	    for (int i=0; i<args.length-1; i++) {
                if (args[i].equals("-props")) {
                    // override with values in local directory, 
                    // but still load defaults with original name
                    propFilename = args[i+1];
                }
	    }
	    if((TestNamingService.class).getClassLoader() != null)
		try {
		    props.load((TestNamingService.class).getClassLoader().getResourceAsStream( defaultsFilename ));
		} catch (Exception e) {
		    //logger.warn
		    System.out.println("Could not load defaults. "+e);
		}
            try {
                FileInputStream in = new FileInputStream(propFilename);
                props.load(in);	
                in.close();
            } catch (FileNotFoundException f) {
                //logger.warn
		System.out.println(" file missing "+f+" using defaults");
            } catch (IOException f) {
                //logger.warn
		System.out.println(f.toString()+" using defaults");
	    }

	    // configure logging from properties...
	    PropertyConfigurator.configure(props);
            
            // Initialize the ORB.
            orb = 
                (org.omg.CORBA_2_3.ORB)org.omg.CORBA.ORB.init(args, props);
            
            // register valuetype factories
            AllVTFactory vt = new AllVTFactory();
            vt.register(orb);

            org.omg.CORBA.Object obj = null;
	    DataCenter seisdc = null;
	    FissuresNamingServiceImpl fissuresNamingService = new FissuresNamingServiceImpl(orb);
	    obj = fissuresNamingService.resolve("SCEPPSeismogramDC", null, null);
	    seisdc = DataCenterHelper.narrow(obj);

		//logger.info
	    System.out.println("Got Seis DC");
	    
	    PlottableImpl pl_impl = new PlottableImpl(seisdc,  props, null);
	    PlottableDC pl = pl_impl._this(orb);
	    System.out.println("Before the call to rebind");
	    //fissuresNamingService.rebind("edu/sc/seis/test/test1/test2", "notused", "notused",  pl);
	    fissuresNamingService.rebind("sri/edu/sc/seis", "test1",  pl);
	    //fissuresNamingService.unbind("sri/edu/sc/seis", "test", "test1");
	    System.out.println("Bound To Naming Service");
	    pl = PlottableDCHelper.narrow(fissuresNamingService.resolve("sri/edu/sc/seis", "PlottableDC", "test1"));
	    
	    String[] interfaceNames = fissuresNamingService.getInterfaceNames("sri/edu/sc/seis");
	    for(int i = 0; i < interfaceNames.length; i++)
		System.out.println("interface: " + interfaceNames[i]);
	    
	    interfaceNames = fissuresNamingService.getInstanceNames("sri/edu/sc/seis", null);
	    for(int i = 0; i < interfaceNames.length; i++)
		System.out.println("instance: " + interfaceNames[i]);

	    interfaceNames = fissuresNamingService.getDNSNames("sri/edu/sc");
	    for(int i = 0; i < interfaceNames.length; i++)
		System.out.println("dns: " + interfaceNames[i]);
	    

	    System.out.println("SUCCESSFUL");
   
	    
	} catch(Exception e) {
	    
	    System.out.println("Exception caught in the main function of TestNamingService");
	    e.printStackTrace();
	}
	    
    }


     static Category logger = Category.getInstance(TestNamingService.class.getName());


}// TestNamingService
