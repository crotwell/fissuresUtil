
<project name="FissuresUtil" default="dist" basedir=".">

<!-- set global properties for this build -->
       <property name="src" value="src" />
       <property name="build" value="build" />
       <property name="dist" value="dist" />
       <property name="doc" value="${dist}/doc" />
       <property name="javadocs" value="${dist}/javadocs" />
       <property file="../KeySigning/ant.props" />
       <property name="junit_jar" value="../junit3.7/junit.jar" />
       <property name="fissuresImpljar" value="/seis/data0/crotwell/fissures/dist/lib/FissuresImpl.jar" />
       <property name="fissuresIDLjar" value="/seis/data0/crotwell/fissures/dist/lib/FissuresIDL.jar" />
       <property name="junitdir" value="/seis/data0/crotwell/junit3.7" />
       <property name="objar" value="/seis/data0/crotwell/OrbacusSignedJars/dist/OB.jar" />
       <property name="obnamingjar" value="/seis/data0/crotwell/OrbacusSignedJars/dist/OBNaming.jar" />

       <target name="prepare">
         <!-- Create the time stamp -->
         <tstamp/>
         <!-- Create the build directory structure used by compile -->
         <mkdir dir="${build}" />
         <mkdir dir="${dist}" />
         <mkdir dir="${dist}/lib" />
         <mkdir dir="${doc}" />
         <mkdir dir="${javadocs}" />
       </target>

       <target name="javacompile" 
               depends="prepare">
         <!-- Compile the java code from ${src} into ${build} -->
         <javac destdir="${build}" classpath="${build}:${fissuresImpljar}:${fissuresIDLjar}:${junitdir}/junit.jar:${objar}:${obnamingjar}" >
            <src path="${src}" />
            <include name="**/*.java" />
            <exclude name="src/edu/sc/seis/fissuresUtil/namingService/TestNamingService.java" />

         </javac>
       </target>

       <target name="testcompile" depends="javacompile">
         <!-- Compile the java code from ${src}/test into ${build} -->
         <javac destdir="${build}" classpath="${build}:${fissuresImpljar}:${fissuresIDLjar}:${junitdir}/junit.jar:${objar}:${obnamingjar}" >
            <src path="${src}" />
            <include name="test/**/*.java" />
<!--
-->
         </javac>
       </target>

       <target name="test" depends="testcompile">
           <java fork="yes" classname="junit.swingui.TestRunner"
                 taskname="junit" failonerror="true" >
              <arg value="test.edu.sc.seis.anhinga.database.AllJUnitTests"/>
              <classpath>
                <pathelement location="${junit_jar}"/>
                <pathelement location="/opt/local/External/Java/jre/lib/ext/postgresql.jar"/>
                <pathelement location="/opt/local/External/Java/jre/lib/ext/log4j.jar"/>
                <pathelement location="${build}" />
                <pathelement location="${fissuresdir}/FissuresImpl.jar" />
                <pathelement location="${fissuresdir}/FissuresIDL.jar" />
              </classpath>
           </java>
       </target>

       <target name="javadoc" depends="prepare">
         <!-- Compile the javadocs from ${src} into ${javadocs} -->
         <javadoc destdir="${javadocs}" sourcepath="${src}" 
packagenames="edu.sc.seis.fissuresUtil.*.*"  maxmemory="64m" >

        <link href="http://www.seis.sc.edu/software/Fissures/idljava_docs" />
         </javadoc>
       </target>

       <target name="jar" depends="javacompile, testcompile">
         <jar jarfile="${dist}/lib/FissuresUtil.jar" basedir="${build}" />
       </target>

       <target name="signjar" depends="jar" if="signjarpasswd">
         <signjar jar="${dist}/lib/FissuresUtil.jar"
                  alias="scepp"
                  storepass="${signjarpasswd}"
                  keystore="../KeySigning/SCEPPKeystore"/>
       </target>

       <target name="dist" depends="testcompile, jar, signjar">
         <zip zipfile="${dist}/lib/fissuresUtil_src.zip" >
              <fileset dir=".." >
                 <include name="FissuresUtil/**/*.java" />
                 <exclude name="FissuresUtil/**/*.class" />
              </fileset>
         </zip>
       </target>

       <target name="clean">
         <!-- Delete the ${build} and ${dist} directory trees -->
         <delete dir="${build}" />
         <delete dir="${dist}" />
       </target>
</project>
