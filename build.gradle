plugins {
  id "edu.sc.seis.version-class" version "1.1.1"
  id "java-library"
  id 'maven-publish'
}
apply plugin: 'eclipse'
apply plugin: 'project-report'

group = 'edu.sc.seis'
version = '1.1.15-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            url = "file://${buildDir}/repo"
        }
    }
}

configurations {
    all*.exclude group: 'xml-apis',  module: 'xml-apis'
    all*.exclude group: 'xerces',  module: 'xmlParserAPIs'
}

repositories {
    mavenLocal()
    maven { url "http://www.seis.sc.edu/software/maven2" }
    mavenCentral()
    maven { url "http://spring-rich-c.sourceforge.net/maven2repository" }
    maven { url "http://oss.sonatype.org/content/groups/public" }
    maven { url "https://repository.jboss.org/nexus/content/repositories/public" }
}

dependencies {
    compile "edu.sc.seis:fissuresImpl:1.1.22"
    compile "edu.sc.seis:seisFile:1.8.7-SNAPSHOT"
    compile "edu.sc.seis:TauP:2.4.5"
    compile "com.oregondsp.signalprocessing:oregondsp:2011"
    compile "org.hibernate:hibernate-ehcache:3.6.9.Final"
    compile "org.hibernate:hibernate-core:3.6.9.Final"
    runtime "org.hibernate:hibernate-c3p0:3.6.9.Final"
    compile "javassist:javassist:3.12.1.GA" // ideally should be a hibernate dep
    compile "com.isti:isti.util:20120201"
//    compile "edu.sc.seis.mapData:etopo10:1.0"
    compile "org.hsqldb:hsqldb:2.5.1"
    compile "org.postgresql:postgresql:9.4-1201-jdbc41"
    compile "mysql:mysql-connector-java:5.1.9"
    compile "xerces:xercesImpl:2.10.0"
    compile "xalan:xalan:2.7.1"
    compile "openmap:openmap:4.6.2"
    compile "com.github.librepdf:openpdf:1.0.1"
//    runtime "stax:stax-api:1.0.1"
//    runtime group: 'stax', name: 'stax', version: '1.2.0', transitive: false
    compile "org.apache.velocity:velocity:1.7"
    compile "jfreechart:jcommon:1.0.0"
    compile "jfreechart:jfreechart:1.0.1"
    compile "javamailUSC:javamail:1.3.2"
    compile "activationUSC:activation:1.0.2"
    testCompile "junit:junit:4.11"
    testCompile "junit-addons:junit-addons:1.4"
}

def binDistFiles = copySpec {
    from(configurations.default) {
        into('lib')
    }
    from(configurations.default.allArtifacts.files) {
        into('lib')
    }
    from('build/scripts') {
        fileMode=0755
        include('bin/**')
        include('bat/**')
    }
}

def distFiles = copySpec {
    with(binDistFiles)
    from('build/docs') {
        include('javadoc/**')
    }
    from('build') {
        include('build.gradle')
        include('settings.gradle')
    }
    from('.') {
        include('gpl-3.0.txt')
        include('README.txt')
        include('doc/**')
        include('src/**')
        include('gradleWrapper/**')
        include('gradlew.bat')
        exclude('**/*.svn')
    }
    from('.') {
        fileMode=0755
        include('gradlew')
    }
    from('build') {
        include('build.gradle')
    }
}


task explodeBin(type: Sync, dependsOn: ['makeScript' ]) {
    group = 'dist'
    with binDistFiles
    into file("$buildDir/explode")
}
task explodeDist(type: Sync, dependsOn: ['makeScript', 'javadoc']) {
    group = 'dist'
    with distFiles
    into file("$buildDir/explode")
}


task tarDist(type: Tar, dependsOn: ['makeScript', 'javadoc']) {
    def dirName = project.name+'-'+version
    compression = Compression.GZIP
    into(dirName) {
        with distFiles
    }
}


def getDExtras() {
    return [ 'seis.name':'sod-3.0.0alpha.sod',
                'org.omg.CORBA.ORBSingletonClass':'org.jacorb.orb.ORBSingleton',
                'python.path':'${LIB}',
                'java.awt.headless':'true',
                'org.omg.CORBA.ORBClass':'org.jacorb.orb.ORB',
                'swing.volatileImageBufferEnabled':'false',
                'java.endorsed.dirs':'${LIB}/endorsed',
                'jacorb.connection.client.pending_reply_timeout':'120000',
                'jacorb.log.default.verbosity':'2' ]
}

task makeScript() {
  doLast {
    def dExtras = getDExtras()
    ScriptBuilder.create('threadSeis', 'edu.sc.seis.fissuresUtil.simple.ThreadedSeismogramClient', project, dExtras:dExtras)
    ScriptBuilder.create('seis', 'edu.sc.seis.fissuresUtil.simple.SimpleSeismogramClient', project, dExtras:dExtras)
    ScriptBuilder.create('event', 'edu.sc.seis.fissuresUtil.simple.SimpleEventClient', project, dExtras:dExtras)
    ScriptBuilder.create('nsbrowser', 'edu.sc.seis.fissuresUtil.namingService.Browser', project, dExtras:dExtras)
    ScriptBuilder.create('unbindone', 'edu.sc.seis.fissuresUtil.namingService.UnbindOne', project, dExtras:dExtras)
    ScriptBuilder.create('nscopy', 'edu.sc.seis.fissuresUtil.namingService.NameServiceCopy', project, dExtras:dExtras)
    ScriptBuilder.create('mseedtest', 'edu.sc.seis.fissuresUtil.mseed.MSeedFileRead', project, dExtras:dExtras)
  }
}
