
group = 'edu.sc.seis'
version = '1.1.5-SNAPSHOT'

configurations {
    all*.exclude group: 'xml-apis',  module: 'xml-apis'
    all*.exclude group: 'xerces',  module: 'xmlParserAPIs'
}

dependencies {
    compile project(':fissuresImpl')
    compile project(':seisFile')
    compile project(':TauP')
    compile "com.oregondsp.signalprocessing:oregondsp:2011"
    compile "org.hibernate:hibernate-ehcache:3.6.9.Final"
    compile "org.hibernate:hibernate-core:3.6.9.Final"
    runtime "org.hibernate:hibernate-c3p0:3.6.9.Final"
    compile "javassist:javassist:3.12.1.GA" // ideally should be a hibernate dep
    compile "com.isti:isti.util:20120201"
//    compile "edu.sc.seis.mapData:etopo10:1.0"
    compile "hsqldb:hsqldb:1.8.0.10"
//    compile "org.hsqldb:hsqldb:2.2.4"
    compile "postgresql:postgresql:9.1-901.jdbc3"
    compile "mysql:mysql-connector-java:5.1.9"
    compile "xerces:xercesImpl:2.10.0"
    compile "xalan:xalan:2.7.1"
    compile "openmap:openmap:4.6.2"
    compile "com.itextpdf:itextpdf:5.1.3"
//    runtime "stax:stax-api:1.0.1"
//    runtime group: 'stax', name: 'stax', version: '1.2.0', transitive: false
    compile "org.apache.velocity:velocity:1.7"
    compile "jfreechart:jcommon:1.0.0"
    compile "jfreechart:jfreechart:1.0.1"
    compile "javamailUSC:javamail:1.3.2"
    compile "activationUSC:activation:1.0.2"
    testCompile "junit:junit:3.8.2"
    testCompile "junit-addons:junit-addons:1.4"
}

def binDistFiles = copySpec {
    from('build/output') {
        fileMode=0755
        include('bin/**')
    }
    from('build/output') {
        include('lib/**')
    }
}

def distFiles = copySpec {
    with(binDistFiles)
    from('build/docs') {
        include('javadoc/**')
    }
    from('build') {
        include('build.gradle')
        include('settings.gradle')
    }
    from('.') {
        include('gpl-3.0.txt')
        include('README.txt')
        include('doc/**')
        include('src/**')
        include('gradleWrapper/**')
        include('gradlew.bat')
        exclude('**/*.svn')
    }
    from('.') {
        fileMode=0755
        include('gradlew')
    }
    from('build') {
        include('build.gradle')
    }
}


task explodeBin(type: Sync, dependsOn: ['makeScript' ]) {
    group = 'dist'
    with binDistFiles
    into file("$buildDir/explode")
}
task explodeDist(type: Sync, dependsOn: ['makeScript', 'javadoc', 'wrapper', 'createBuildScript']) {
    group = 'dist'
    with distFiles
    into file("$buildDir/explode")
}


task tarDist(type: Tar, dependsOn: ['makeScript', 'javadoc', 'wrapper', 'createBuildScript']) {
    def dirName = project.name+'-'+version
    compression = Compression.GZIP
    into(dirName) {
        with distFiles
    }
}


def getDExtras() {
    return [ 'seis.name':'sod-3.0.0alpha.sod',
                'org.omg.CORBA.ORBSingletonClass':'org.jacorb.orb.ORBSingleton',
                'python.path':'${LIB}',
                'java.awt.headless':'true',
                'org.omg.CORBA.ORBClass':'org.jacorb.orb.ORB',
                'swing.volatileImageBufferEnabled':'false',
                'java.endorsed.dirs':'${LIB}/endorsed',
                'jacorb.connection.client.pending_reply_timeout':'120000',
                'jacorb.log.default.verbosity':'2' ]
}

task makeScript(dependsOn: copyToLib) << { task ->
    def dExtras = getDExtras()
    ScriptBuilder.create('threadSeis', 'edu.sc.seis.fissuresUtil.simple.ThreadedSeismogramClient', task.project, dExtras:dExtras)
    ScriptBuilder.create('seis', 'edu.sc.seis.fissuresUtil.simple.SimpleSeismogramClient', task.project, dExtras:dExtras)
    ScriptBuilder.create('event', 'edu.sc.seis.fissuresUtil.simple.SimpleEventClient', task.project, dExtras:dExtras)
    ScriptBuilder.create('nsbrowser', 'edu.sc.seis.fissuresUtil.namingService.Browser', task.project, dExtras:dExtras)
    ScriptBuilder.create('unbindone', 'edu.sc.seis.fissuresUtil.namingService.UnbindOne', task.project, dExtras:dExtras)
    ScriptBuilder.create('nscopy', 'edu.sc.seis.fissuresUtil.namingService.NameServiceCopy', task.project, dExtras:dExtras)
    ScriptBuilder.create('mseedtest', 'edu.sc.seis.fissuresUtil.mseed.MSeedFileRead', task.project, dExtras:dExtras)
}

javadoc.options.links('http://wiki.fissuresidl.googlecode.com/hg/javadoc/')
javadoc.options.links('http://wiki.fissuresimpl.googlecode.com/hg/javadoc/')
javadoc.options.links('http://wiki.seedcodec.googlecode.com/hg/javadoc/')
javadoc.options.links('http://wiki.seisfile.googlecode.com/hg/javadoc/')
